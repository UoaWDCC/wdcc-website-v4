/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export type Config = {
    auth: {
        users: UserAuthOperations;
    };
    collections: {
        users: User;
        media: Media;
        event: Event;
        project: Project;
        test: Test;
        partners: Partner;
        "payload-locked-documents": PayloadLockedDocument;
        "payload-preferences": PayloadPreference;
        "payload-migrations": PayloadMigration;
    };
    collectionsJoins: {};
    collectionsSelect: {
        users: UsersSelect<false> | UsersSelect;
        media: MediaSelect<false> | MediaSelect;
        event: EventSelect<false> | EventSelect;
        project: ProjectSelect<false> | ProjectSelect;
        test: TestSelect<false> | TestSelect;
        partners: PartnersSelect<false> | PartnersSelect;
        "payload-locked-documents": PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect;
        "payload-preferences": PayloadPreferencesSelect<false> | PayloadPreferencesSelect;
        "payload-migrations": PayloadMigrationsSelect<false> | PayloadMigrationsSelect;
    };
    db: {
        defaultIDType: number;
    };
    globals: {
        "execs-page": ExecsPage;
        "faq-page": FaqPage;
        "about-page": AboutPage;
        "projects-page": ProjectsPage;
        "hero-page": HeroPage;
    };
    globalsSelect: {
        "execs-page": ExecsPageSelect<false> | ExecsPageSelect;
        "faq-page": FaqPageSelect<false> | FaqPageSelect;
        "about-page": AboutPageSelect<false> | AboutPageSelect;
        "projects-page": ProjectsPageSelect<false> | ProjectsPageSelect;
        "hero-page": HeroPageSelect<false> | HeroPageSelect;
    };
    locale: null;
    user: User & {
        collection: "users";
    };
    jobs: {
        tasks: unknown;
        workflows: unknown;
    };
};
export type UserAuthOperations = {
    forgotPassword: {
        email: string;
        password: string;
    };
    login: {
        email: string;
        password: string;
    };
    registerFirstUser: {
        email: string;
        password: string;
    };
    unlock: {
        email: string;
        password: string;
    };
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export type User = {
    id: number;
    updatedAt: string;
    createdAt: string;
    email: string;
    resetPasswordToken?: string | null;
    resetPasswordExpiration?: string | null;
    salt?: string | null;
    hash?: string | null;
    loginAttempts?: number | null;
    lockUntil?: string | null;
    password?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export type Media = {
    id: number;
    alt: string;
    prefix?: string | null;
    updatedAt: string;
    createdAt: string;
    url?: string | null;
    thumbnailURL?: string | null;
    filename?: string | null;
    mimeType?: string | null;
    filesize?: number | null;
    width?: number | null;
    height?: number | null;
    focalX?: number | null;
    focalY?: number | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event".
 */
export type Event = {
    id: number;
    thumbnail: number | Media;
    slug: string;
    title: string;
    Description: string;
    time: string;
    location: string;
    category: "Workshop" | "Competition" | "Social" | "Projects" | "Other";
    page: {
        Description: string;
        image: number | Media;
    };
    Partners?: (number | Partner)[] | null;
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners".
 */
export type Partner = {
    id: number;
    href: string;
    alt: string;
    prefix?: string | null;
    updatedAt: string;
    createdAt: string;
    url?: string | null;
    thumbnailURL?: string | null;
    filename?: string | null;
    mimeType?: string | null;
    filesize?: number | null;
    width?: number | null;
    height?: number | null;
    focalX?: number | null;
    focalY?: number | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project".
 */
export type Project = {
    id: number;
    slug: string;
    year: string;
    client: string;
    technologies: (
        | "html"
        | "css"
        | "javascript"
        | "typescript"
        | "node"
        | "react"
        | "vue"
        | "vite"
        | "tailwindcss"
        | "express"
        | "python"
        | "supabase"
        | "payload"
        | "notion"
        | "nextjs"
        | "astro"
        | "mongodb"
        | "firebase"
        | "postgresql"
        | "prisma"
        | "drizzleorm"
        | "redis"
        | "aws"
        | "fly"
        | "figma"
        | "motion"
        | "nextauth"
        | "vitest"
        | "twitch"
    )[];
    difficulty: "academy" | "easy" | "medium" | "hard" | "unassigned";
    name: string;
    description: string;
    thumbnail: number | Media;
    extendedName?: string | null;
    extendedDescription: string;
    image: number | Media;
    primaryLink: {
        label: string;
        href: string;
    };
    secondaryLink: {
        label: string;
        href: string;
    };
    manager: {
        name: string;
        image?: (number | null) | Media;
    };
    techlead: {
        name: string;
        image?: (number | null) | Media;
    };
    members?:
        | {
              name: string;
              role: "developer" | "designer" | "tutor";
              image?: (number | null) | Media;
              id?: string | null;
          }[]
        | null;
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test".
 */
export type Test = {
    id: number;
    slug: string;
    year: string;
    client: string;
    name: {
        default: string;
        extended?: string | null;
    };
    description: string;
    brief: {
        description: string;
        image: number | Media;
    };
    technologies: (
        | "html"
        | "css"
        | "javascript"
        | "typescript"
        | "node"
        | "react"
        | "vue"
        | "vite"
        | "tailwindcss"
        | "express"
        | "python"
        | "supabase"
        | "payload"
        | "notion"
        | "nextjs"
        | "astro"
        | "mongodb"
        | "firebase"
        | "postgresql"
        | "prisma"
        | "drizzleorm"
        | "redis"
        | "aws"
        | "fly"
        | "figma"
        | "motion"
        | "nextauth"
        | "vitest"
        | "twitch"
    )[];
    primaryLink: {
        label: string;
        href: string;
    };
    secondaryLink: {
        label: string;
        href: string;
    };
    team: {
        manager: {
            name: string;
            image?: (number | null) | Media;
        };
        techlead: {
            name: string;
            image?: (number | null) | Media;
        };
        members?:
            | {
                  name: string;
                  role: "engineer" | "designer";
                  image?: (number | null) | Media;
                  id?: string | null;
              }[]
            | null;
    };
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export type PayloadLockedDocument = {
    id: number;
    document?:
        | ({
              relationTo: "users";
              value: number | User;
          } | null)
        | {
              relationTo: "media";
              value: number | Media;
          }
        | {
              relationTo: "event";
              value: number | Event;
          }
        | {
              relationTo: "project";
              value: number | Project;
          }
        | {
              relationTo: "test";
              value: number | Test;
          }
        | {
              relationTo: "partners";
              value: number | Partner;
          };
    globalSlug?: string | null;
    user: {
        relationTo: "users";
        value: number | User;
    };
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export type PayloadPreference = {
    id: number;
    user: {
        relationTo: "users";
        value: number | User;
    };
    key?: string | null;
    value?: Record<string, unknown> | unknown[] | string | number | boolean | null;
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export type PayloadMigration = {
    id: number;
    name?: string | null;
    batch?: number | null;
    updatedAt: string;
    createdAt: string;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export type UsersSelect<T extends boolean = true> = {
    updatedAt?: T;
    createdAt?: T;
    email?: T;
    resetPasswordToken?: T;
    resetPasswordExpiration?: T;
    salt?: T;
    hash?: T;
    loginAttempts?: T;
    lockUntil?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export type MediaSelect<T extends boolean = true> = {
    alt?: T;
    prefix?: T;
    updatedAt?: T;
    createdAt?: T;
    url?: T;
    thumbnailURL?: T;
    filename?: T;
    mimeType?: T;
    filesize?: T;
    width?: T;
    height?: T;
    focalX?: T;
    focalY?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event_select".
 */
export type EventSelect<T extends boolean = true> = {
    thumbnail?: T;
    slug?: T;
    title?: T;
    Description?: T;
    time?: T;
    location?: T;
    category?: T;
    page?:
        | T
        | {
              Description?: T;
              image?: T;
          };
    Partners?: T;
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project_select".
 */
export type ProjectSelect<T extends boolean = true> = {
    slug?: T;
    year?: T;
    client?: T;
    technologies?: T;
    difficulty?: T;
    name?: T;
    description?: T;
    thumbnail?: T;
    extendedName?: T;
    extendedDescription?: T;
    image?: T;
    primaryLink?:
        | T
        | {
              label?: T;
              href?: T;
          };
    secondaryLink?:
        | T
        | {
              label?: T;
              href?: T;
          };
    manager?:
        | T
        | {
              name?: T;
              image?: T;
          };
    techlead?:
        | T
        | {
              name?: T;
              image?: T;
          };
    members?:
        | T
        | {
              name?: T;
              role?: T;
              image?: T;
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test_select".
 */
export type TestSelect<T extends boolean = true> = {
    slug?: T;
    year?: T;
    client?: T;
    name?:
        | T
        | {
              default?: T;
              extended?: T;
          };
    description?: T;
    brief?:
        | T
        | {
              description?: T;
              image?: T;
          };
    technologies?: T;
    primaryLink?:
        | T
        | {
              label?: T;
              href?: T;
          };
    secondaryLink?:
        | T
        | {
              label?: T;
              href?: T;
          };
    team?:
        | T
        | {
              manager?:
                  | T
                  | {
                        name?: T;
                        image?: T;
                    };
              techlead?:
                  | T
                  | {
                        name?: T;
                        image?: T;
                    };
              members?:
                  | T
                  | {
                        name?: T;
                        role?: T;
                        image?: T;
                        id?: T;
                    };
          };
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "partners_select".
 */
export type PartnersSelect<T extends boolean = true> = {
    href?: T;
    alt?: T;
    prefix?: T;
    updatedAt?: T;
    createdAt?: T;
    url?: T;
    thumbnailURL?: T;
    filename?: T;
    mimeType?: T;
    filesize?: T;
    width?: T;
    height?: T;
    focalX?: T;
    focalY?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export type PayloadLockedDocumentsSelect<T extends boolean = true> = {
    document?: T;
    globalSlug?: T;
    user?: T;
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export type PayloadPreferencesSelect<T extends boolean = true> = {
    user?: T;
    key?: T;
    value?: T;
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export type PayloadMigrationsSelect<T extends boolean = true> = {
    name?: T;
    batch?: T;
    updatedAt?: T;
    createdAt?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "execs-page".
 */
export type ExecsPage = {
    id: number;
    title: string;
    description: string;
    teams: {
        teamName: string;
        teamDescription: string;
        execs?:
            | {
                  name: string;
                  role: string;
                  image?: (number | null) | Media;
                  description: string;
                  joined: string;
                  id?: string | null;
              }[]
            | null;
        id?: string | null;
    }[];
    updatedAt?: string | null;
    createdAt?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq-page".
 */
export type FaqPage = {
    id: number;
    info: string;
    sections: {
        name: string;
        faqs: {
            question: string;
            answer: string;
            id?: string | null;
        }[];
        colors: {
            tabBg: string;
            tabCircle: string;
        };
        id?: string | null;
    }[];
    updatedAt?: string | null;
    createdAt?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-page".
 */
export type AboutPage = {
    id: number;
    header: {
        title: string;
        content: string;
    };
    genInfo: {
        firstPart: string;
        secondPart: string;
        image: number | Media;
    };
    whyJoin: {
        title: string;
        content: string;
        image: number | Media;
    };
    clubStory: {
        title: string;
        content: string;
        image: number | Media;
    };
    ourPeople: {
        title: string;
        content: string;
        image: number | Media;
    };
    quoteSection: {
        quote: string;
        author: string;
        subscript: string;
    };
    endImage: {
        image: number | Media;
    };
    updatedAt?: string | null;
    createdAt?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects-page".
 */
export type ProjectsPage = {
    id: number;
    header: {
        title: string;
        content: string;
        buttons: {
            text: string;
            link: string;
            id?: string | null;
        }[];
    };
    infoSection: {
        main: string;
        checkboxes: {
            title: string;
            checks?:
                | {
                      text: string;
                      id?: string | null;
                  }[]
                | null;
        };
    };
    operationSection: {
        title: string;
        content: string;
    };
    rolesSection: {
        title: string;
        roles?:
            | {
                  color: "blue" | "purple" | "yellow" | "green";
                  title: string;
                  slug: string;
                  description: string;
                  id?: string | null;
              }[]
            | null;
    };
    featuredSection: {
        title: string;
        cta: string;
    };
    updatedAt?: string | null;
    createdAt?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero-page".
 */
export type HeroPage = {
    id: number;
    hero: {
        title: string;
        blurb: string;
    };
    thisIsWDCC: {
        description: string;
        whatWeDo?:
            | {
                  index: string;
                  title: string;
                  slug: string;
                  description: string;
                  variant: "blue" | "green" | "yellow";
                  id?: string | null;
              }[]
            | null;
    };
    sponsorSection?: {
        gold?: (number | Partner)[] | null;
        silver?: (number | Partner)[] | null;
        tech?: (number | Partner)[] | null;
        community?: (number | Partner)[] | null;
    };
    signUpCard: {
        title: string;
        descriptionLineOne: string;
        descriptionLineTwo: string;
    };
    updatedAt?: string | null;
    createdAt?: string | null;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "execs-page_select".
 */
export type ExecsPageSelect<T extends boolean = true> = {
    title?: T;
    description?: T;
    teams?:
        | T
        | {
              teamName?: T;
              teamDescription?: T;
              execs?:
                  | T
                  | {
                        name?: T;
                        role?: T;
                        image?: T;
                        description?: T;
                        joined?: T;
                        id?: T;
                    };
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
    globalType?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "faq-page_select".
 */
export type FaqPageSelect<T extends boolean = true> = {
    info?: T;
    sections?:
        | T
        | {
              name?: T;
              faqs?:
                  | T
                  | {
                        question?: T;
                        answer?: T;
                        id?: T;
                    };
              colors?:
                  | T
                  | {
                        tabBg?: T;
                        tabCircle?: T;
                    };
              id?: T;
          };
    updatedAt?: T;
    createdAt?: T;
    globalType?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "about-page_select".
 */
export type AboutPageSelect<T extends boolean = true> = {
    header?:
        | T
        | {
              title?: T;
              content?: T;
          };
    genInfo?:
        | T
        | {
              firstPart?: T;
              secondPart?: T;
              image?: T;
          };
    whyJoin?:
        | T
        | {
              title?: T;
              content?: T;
              image?: T;
          };
    clubStory?:
        | T
        | {
              title?: T;
              content?: T;
              image?: T;
          };
    ourPeople?:
        | T
        | {
              title?: T;
              content?: T;
              image?: T;
          };
    quoteSection?:
        | T
        | {
              quote?: T;
              author?: T;
              subscript?: T;
          };
    endImage?:
        | T
        | {
              image?: T;
          };
    updatedAt?: T;
    createdAt?: T;
    globalType?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "projects-page_select".
 */
export type ProjectsPageSelect<T extends boolean = true> = {
    header?:
        | T
        | {
              title?: T;
              content?: T;
              buttons?:
                  | T
                  | {
                        text?: T;
                        link?: T;
                        id?: T;
                    };
          };
    infoSection?:
        | T
        | {
              main?: T;
              checkboxes?:
                  | T
                  | {
                        title?: T;
                        checks?:
                            | T
                            | {
                                  text?: T;
                                  id?: T;
                              };
                    };
          };
    operationSection?:
        | T
        | {
              title?: T;
              content?: T;
          };
    rolesSection?:
        | T
        | {
              title?: T;
              roles?:
                  | T
                  | {
                        color?: T;
                        title?: T;
                        slug?: T;
                        description?: T;
                        id?: T;
                    };
          };
    featuredSection?:
        | T
        | {
              title?: T;
              cta?: T;
          };
    updatedAt?: T;
    createdAt?: T;
    globalType?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "hero-page_select".
 */
export type HeroPageSelect<T extends boolean = true> = {
    hero?:
        | T
        | {
              title?: T;
              blurb?: T;
          };
    thisIsWDCC?:
        | T
        | {
              description?: T;
              whatWeDo?:
                  | T
                  | {
                        index?: T;
                        title?: T;
                        slug?: T;
                        description?: T;
                        variant?: T;
                        id?: T;
                    };
          };
    sponsorSection?:
        | T
        | {
              gold?: T;
              silver?: T;
              tech?: T;
              community?: T;
          };
    signUpCard?:
        | T
        | {
              title?: T;
              descriptionLineOne?: T;
              descriptionLineTwo?: T;
          };
    updatedAt?: T;
    createdAt?: T;
    globalType?: T;
};
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export type Auth = Record<string, unknown>;

declare module "payload" {
    export type GeneratedTypes = {} & Config;
}
