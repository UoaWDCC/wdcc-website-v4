/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    media: Media;
    event: Event;
    project: Project;
    test: Test;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    media: MediaSelect<false> | MediaSelect<true>;
    event: EventSelect<false> | EventSelect<true>;
    project: ProjectSelect<false> | ProjectSelect<true>;
    test: TestSelect<false> | TestSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: number;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: number;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: number;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event".
 */
export interface Event {
  id: number;
  alt: string;
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project".
 */
export interface Project {
  id: number;
  cardImage: number | Media;
  slug: string;
  year: string;
  client: string;
  name: {
    default: string;
    extended?: string | null;
  };
  description: string;
  brief: {
    description: string;
    image: number | Media;
  };
  technologies: (
    | 'astro'
    | 'aws'
    | 'css'
    | 'drizzleorm'
    | 'figma'
    | 'fly'
    | 'html'
    | 'javascript'
    | 'missing'
    | 'mongodb'
    | 'motion'
    | 'nextjs'
    | 'postgresql'
    | 'python'
    | 'react'
    | 'redis'
    | 'supabase'
    | 'tailwindcss'
    | 'twitch'
    | 'typescript'
    | 'vite'
    | 'vitest'
  )[];
  links?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  team: {
    manager: {
      name: string;
      image?: (number | null) | Media;
    };
    techlead: {
      name: string;
      image?: (number | null) | Media;
    };
    members?:
      | {
          name: string;
          role: 'engineer' | 'designer';
          image?: (number | null) | Media;
          id?: string | null;
        }[]
      | null;
  };
  prefix?: string | null;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test".
 */
export interface Test {
  id: number;
  cardImage: number | Media;
  slug: string;
  year: string;
  client: string;
  name: {
    default: string;
    extended?: string | null;
  };
  description: string;
  brief: {
    description: string;
    image: number | Media;
  };
  technologies: (
    | 'astro'
    | 'aws'
    | 'css'
    | 'drizzleorm'
    | 'figma'
    | 'fly'
    | 'html'
    | 'javascript'
    | 'missing'
    | 'mongodb'
    | 'motion'
    | 'nextjs'
    | 'postgresql'
    | 'python'
    | 'react'
    | 'redis'
    | 'supabase'
    | 'tailwindcss'
    | 'twitch'
    | 'typescript'
    | 'vite'
    | 'vitest'
  )[];
  links?:
    | {
        label: string;
        url: string;
        id?: string | null;
      }[]
    | null;
  'project manager': {
    name: string;
    image?: (number | null) | Media;
  };
  'technical lead': {
    name: string;
    image?: (number | null) | Media;
  };
  'project members'?:
    | {
        name: string;
        role: 'engineer' | 'designer';
        image?: (number | null) | Media;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: number;
  document?:
    | ({
        relationTo: 'users';
        value: number | User;
      } | null)
    | ({
        relationTo: 'media';
        value: number | Media;
      } | null)
    | ({
        relationTo: 'event';
        value: number | Event;
      } | null)
    | ({
        relationTo: 'project';
        value: number | Project;
      } | null)
    | ({
        relationTo: 'test';
        value: number | Test;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: number;
  user: {
    relationTo: 'users';
    value: number | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: number;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media_select".
 */
export interface MediaSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "event_select".
 */
export interface EventSelect<T extends boolean = true> {
  alt?: T;
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "project_select".
 */
export interface ProjectSelect<T extends boolean = true> {
  cardImage?: T;
  slug?: T;
  year?: T;
  client?: T;
  name?:
    | T
    | {
        default?: T;
        extended?: T;
      };
  description?: T;
  brief?:
    | T
    | {
        description?: T;
        image?: T;
      };
  technologies?: T;
  links?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  team?:
    | T
    | {
        manager?:
          | T
          | {
              name?: T;
              image?: T;
            };
        techlead?:
          | T
          | {
              name?: T;
              image?: T;
            };
        members?:
          | T
          | {
              name?: T;
              role?: T;
              image?: T;
              id?: T;
            };
      };
  prefix?: T;
  updatedAt?: T;
  createdAt?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "test_select".
 */
export interface TestSelect<T extends boolean = true> {
  cardImage?: T;
  slug?: T;
  year?: T;
  client?: T;
  name?:
    | T
    | {
        default?: T;
        extended?: T;
      };
  description?: T;
  brief?:
    | T
    | {
        description?: T;
        image?: T;
      };
  technologies?: T;
  links?:
    | T
    | {
        label?: T;
        url?: T;
        id?: T;
      };
  'project manager'?:
    | T
    | {
        name?: T;
        image?: T;
      };
  'technical lead'?:
    | T
    | {
        name?: T;
        image?: T;
      };
  'project members'?:
    | T
    | {
        name?: T;
        role?: T;
        image?: T;
        id?: T;
      };
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}